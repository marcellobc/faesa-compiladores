/* Generated By:JavaCC: Do not edit this line. AMelhor.java */
package Compilador;

import java.io.*;
import java.util.List;
import java.util.LinkedList;


public class AMelhor implements AMelhorConstants {

        static Tabela tabela = new Tabela();
        static List<Comando> listaComando = new LinkedList<Comando>();

  public static void main(String args []) throws ParseException

  {
      try {
        AMelhor amelhor = new AMelhor(new FileInputStream(args[0]));
        inicio(listaComando);

                // IO.gravarObjetos("arquivo.bin", new Object[] {listaComando, tabela});


         System.out.println("\u005cn Tabela de Simbolos (Variaveis): \u005cn"+tabela.toString());

      }
      catch(ArrayIndexOutOfBoundsException e) {
                 System.out.println("Erro: nao foi possivel ler o arquivo/string");
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico: \u005cn" + e.getMessage());
      }
        }

  static final public void inicio(List<Comando> lista) throws ParseException {
    jj_consume_token(BEGIN);
    BLOCO(lista);
    jj_consume_token(END);
    jj_consume_token(0);
  }

  static final public void BLOCO(List<Comando> lista) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case INTEGER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      DECVARIAVEL(lista);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case INPUT:
      case VAREXPRE:
      case ENQUANTO:
      case SE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      COMANDOS(lista);
    }
      System.out.println(lista);
  }

  static final public void DECVARIAVEL(List<Comando> lista) throws ParseException {
                                         char tp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
                    tp='s';
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
                                          tp='n';
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    listaVar(lista,tp);
  }

  static final public void listaVar(List<Comando> lista,char tp) throws ParseException {
    itemListaVar(lista,tp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAREXPRE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      itemListaVar(lista,tp);
    }
  }

  static final public void itemListaVar(List<Comando> lista,char tp) throws ParseException {
                                                  Comando comando = new Comando('U');Simbolo simb; Token t;Expressao expre; boolean tipoCerto;
    t = jj_consume_token(VAREXPRE);
     if(tabela.isExistent(t.image)) {
                 System.err.println("variavel duplicada '-'");
      }else {
                  simb = new Simbolo();
                  simb.setNome(t.image);
                  simb.setTipo(tp);
                  tabela.inclui(simb);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
      expre = expression();
                comando.setRef2(expre);
                         // validacao de tipagem	
                        if(tp == 'n')
                                tipoCerto = expre.isExpressaoNumerica(tabela);
                        else
                                tipoCerto = expre.isExpressaoTexto();

                        if(!tipoCerto)
                                System.err.println("ERRO!\u005cn Erro Semantico: tipo da variavel \u005c"" + t.image + "\u005c" nao compativel com a expressao atribuida \u005cn");
                 // incluir na tabela que a variavel foi inicializada
                        tabela.inicializaIdent(t.image);
                        lista.add(comando);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void COMANDOS(List<Comando> lista) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAREXPRE:
      atribuicaovalores(lista);
      break;
    case SE:
      verificar(lista);
      break;
    case ENQUANTO:
      loop(lista);
      break;
    case INPUT:
      inserir(lista);
      break;
    case PRINT:
      mostrar(lista);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atribuicaovalores(List<Comando> lista) throws ParseException {
                                               Comando comando = new Comando('A');Token t; Expressao expre; boolean tipoCerto; boolean foiDeclarada=true;
    t = jj_consume_token(VAREXPRE);
         comando.setRef1(t.image);
         // verificar se variavel foi declarada 
                if(!tabela.isExistent(t.image)){
                        System.err.println("ERRO!\u005cn Erro Semantico: variavel \u005c"" + t.image + "\u005c" nao foi declarada\u005cn");
                        foiDeclarada = false;
                }
    jj_consume_token(ATRIBUICAO);
    expre = expression();
                comando.setRef2(expre);
                if(foiDeclarada){
                        if(tabela.getSimbolo(t.image).getTipo() == 'n')
                                tipoCerto = expre.isExpressaoNumerica(tabela);
                        else
                                tipoCerto = expre.isExpressaoTexto();

                        if(!tipoCerto)
                        System.err.println("ERRO!\u005cn Erro Semantico: tipo da variavel \u005c"" + t.image + "\u005c" nao compativel com a expressao atribuida"+"\u005cn");
                }
                tabela.inicializaIdent(t.image);
                lista.add(comando);
  }

  static final public void verificar(List<Comando> lista) throws ParseException {
                                       LinkedList<Comando> listaSe = new LinkedList<Comando>();Comando verificar = new Comando('S');Expressao expre;
    jj_consume_token(SE);
    jj_consume_token(ABRE_PARENTESES);
    expre = expression();
         verificar.setRef1(expre);

        // verifica se a expressao utilizada na condicao eh compativel
        if(!expre.isExpressaoCondicional(tabela))
                System.err.println("ERRO!\u005cn Erro Semantico: condicao utilizada na estrutura se(){} nao compativel\u005cn");
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(THEN);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case INPUT:
      case VAREXPRE:
      case ENQUANTO:
      case SE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      COMANDOS(listaSe);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SENAO:
      verificarSENAO(lista,verificar);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
                lista.add(verificar);
    jj_consume_token(FIMSE);
  }

  static final public void verificarSENAO(List<Comando> lista,Comando verificar) throws ParseException {
                                                              LinkedList<Comando> listaSenao = new LinkedList<Comando>();
    jj_consume_token(SENAO);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case INPUT:
      case VAREXPRE:
      case ENQUANTO:
      case SE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      COMANDOS(listaSenao);
    }
                verificar.setRef3(listaSenao);
  }

  static final public void loop(List<Comando> lista) throws ParseException {
                                  LinkedList<Comando> listaEnquanto = new LinkedList<Comando>();Comando loop = new Comando('E');Expressao expre;
    jj_consume_token(ENQUANTO);
    jj_consume_token(ABRE_PARENTESES);
    expre = expression();
                        loop.setRef1(expre);

                        //Verifica se a expressao utilizada na condicao eh compativel
                                if(!expre.isExpressaoCondicional(tabela))
                                        System.err.println("ERRO!\u005cn Erro Semantico: condicao utilizada na estrutura enquanto(){} nao compativel\u005cn");
    jj_consume_token(FECHA_PARENTESES);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case INPUT:
      case VAREXPRE:
      case ENQUANTO:
      case SE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      COMANDOS(listaEnquanto);
    }
                loop.setRef2(listaEnquanto);
                lista.add(loop);
    jj_consume_token(FIMENQUANTO);
  }

  static final public void inserir(List<Comando> lista) throws ParseException {
    jj_consume_token(INPUT);
    jj_consume_token(ABRE_PARENTESES);
    corpoLeia(lista);
    jj_consume_token(FECHA_PARENTESES);
  }

  static final public void corpoLeia(List<Comando> lista) throws ParseException {
                                       Comando comandoImprime = new Comando('I');Comando comandoLeia = new Comando('L');Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
      jj_consume_token(VIRGULA);
                 comandoImprime.setRef1(t.image);
                 lista.add(comandoImprime);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    t = jj_consume_token(VAREXPRE);
                comandoLeia.setRef1(t.image);
                lista.add(comandoLeia);
                if(!tabela.isExistent(t.image))
                        System.err.println("ERRO!\u005cn Erro Semantico: variavel \u005c"" + t.image + "\u005c" nao foi declarada\u005cn");
      // A��o sem�ntica para incluir na tabela que variavel foi inicializada
                tabela.inicializaIdent(t.image);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRGULA);
      t = jj_consume_token(VAREXPRE);
                    comandoLeia.setRef1(t.image);
                    lista.add(comandoLeia);
                if(!tabela.isExistent(t.image))
                                System.err.println("ERRO!\u005cn Erro Semantico: variavel \u005c"" + t.image + "\u005c" nao foi declarada\u005cn");
         // incluir na tabela que variavel foi inicializada
                        tabela.inicializaIdent(t.image);
    }
  }

  static final public void mostrar(List<Comando> lista) throws ParseException {
                                    Expressao expre;
    jj_consume_token(PRINT);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(CONSTANTE_TEXTO);
    corpoExibe(lista);
    jj_consume_token(FECHA_PARENTESES);
  }

  static final public void corpoExibe(List<Comando> lista) throws ParseException {
                                        Expressao expre;Comando comandoExibe = new Comando('I');Token t;
    /*
    	   (t=<STRING> <VIRGULA> 
    	        {
    	           comandoExibe.setRef1(t.image);
    	   	       lista.add(comandoExibe);
    	        }
    	    )?
    	   */
    
                expre = expression();
                        if(!expre.isExpressaoTexto())
                                System.err.println("ERRO!\u005cn Erro Semantico: expressao utilizada na estrutura exibe() nao compativel\u005cn");

                comandoExibe.setRef1(expre);
                lista.add(comandoExibe);
  }

  static final public Expressao expression() throws ParseException {
                           Expressao listaExp = new Expressao();
    expAuxiliar(listaExp);
          {if (true) return listaExp;}
    throw new Error("Missing return statement in function");
  }

  static final public void expAuxiliar(Expressao listaExp) throws ParseException {
                                        Token t;Item item;
    termo(listaExp);
  }

  static final public void termo(Expressao listaExp) throws ParseException {
                                  Token t;Item item;
    termo1(listaExp);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(OR);
      termo1(listaExp);
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
    }
  }

  static final public void termo1(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    termo2(listaExp);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_9;
      }
      t = jj_consume_token(AND);
      termo2(listaExp);
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
    }
  }

  static final public void termo2(Expressao listaExp) throws ParseException {
                                   Token t; Item item;
    termo3(listaExp);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case MAIOR:
      case MAIOR_IGUAL:
      case MENOR:
      case MENOR_IGUAL:
      case DIFERENTE:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
        t = jj_consume_token(MAIOR);
        break;
      case MENOR:
        t = jj_consume_token(MENOR);
        break;
      case MAIOR_IGUAL:
        t = jj_consume_token(MAIOR_IGUAL);
        break;
      case MENOR_IGUAL:
        t = jj_consume_token(MENOR_IGUAL);
        break;
      case DIFERENTE:
        t = jj_consume_token(DIFERENTE);
        break;
      case IGUAL:
        t = jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo3(listaExp);
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
    }
  }

  static final public void termo3(Expressao listaExp) throws ParseException {
                                    Token t; Item item;
    termo4(listaExp);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        t = jj_consume_token(SOMA);
        termo4(listaExp);
                        if(!listaExp.otimizaExpressao('+') && !listaExp.otimizaString()){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      case SUBTRACAO:
        t = jj_consume_token(SUBTRACAO);
        termo4(listaExp);
                        if(!listaExp.otimizaExpressao('-')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo4(Expressao listaExp) throws ParseException {
                                    Token t; Item item;
    termo5(listaExp);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
      case DIVISAO:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
        t = jj_consume_token(MULTIPLICACAO);
        termo5(listaExp);
                        if(!listaExp.otimizaExpressao('*')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      case DIVISAO:
        t = jj_consume_token(DIVISAO);
        termo5(listaExp);
                        if(!listaExp.otimizaExpressao('/')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo5(Expressao listaExp) throws ParseException {
                                    Token t; Item item;
    termo6(listaExp);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCIA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_13;
      }
      t = jj_consume_token(POTENCIA);
      termo5(listaExp);
                        if(!listaExp.otimizaExpressao('^')){
                                item = new Item('o', t.image);
                                listaExp.inclui(item);
                        }
    }
  }

  static final public void termo6(Expressao listaExp) throws ParseException {
                                    Token t=null; Item item; int cont_OP_NOT=0;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_14;
      }
      t = jj_consume_token(NOT);
                           cont_OP_NOT++;
    }
    termo7(listaExp);
         // Se nao houver nenhum operador not entao nao armazenar
                if(t != null && (cont_OP_NOT % 2 != 0)){
                        item = new Item('o', t.image);
                        listaExp.inclui(item);
                }
  }

  static final public void termo7(Expressao listaExp) throws ParseException {
                                   Token t, t_aux=null; Item item; String num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
    case SUBTRACAO:
    case CONSTANTE_NUMERO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUBTRACAO:
          t_aux = jj_consume_token(SUBTRACAO);
          break;
        case SOMA:
          t_aux = jj_consume_token(SOMA);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      t = jj_consume_token(CONSTANTE_NUMERO);
                if(t_aux != null)
                        num = t_aux.image + t.image;
                else
                        num = t.image;
            item = new Item('n', num);
        listaExp.inclui(item);
      break;
    case VAREXPRE:
      t = jj_consume_token(VAREXPRE);
                if(!tabela.isExistent(t.image))
                        System.err.println("ERRO!\u005cn Erro Semantico: variavel \u005c"" + t.image + "\u005c" nao foi declarada\u005cn");
                if(!tabela.foiInicializado(t.image))
                        System.err.println("ERRO!\u005cn Erro Semantico: variavel \u005c"" + t.image + "\u005c" nao foi inicializada\u005cn");
                item = new Item('v', t.image);
        listaExp.inclui(item);
      break;
    case CONSTANTE_TEXTO:
      t = jj_consume_token(CONSTANTE_TEXTO);
                item = new Item('s', t.image);
        listaExp.inclui(item);
      break;
    case ABRE_PARENTESES:
      jj_consume_token(ABRE_PARENTESES);
      expAuxiliar(listaExp);
      jj_consume_token(FECHA_PARENTESES);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AMelhorTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180,0xc0001600,0x180,0x1000,0x80000,0xc0001600,0xc0001600,0x0,0xc0001600,0xc0001600,0x80,0x10000,0x0,0x0,0x3c40000,0x3c40000,0x6,0x6,0x18,0x18,0x8000,0x0,0x6,0x6,0x20101026,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x100,0x200,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AMelhor(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AMelhor(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AMelhorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AMelhor(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AMelhorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AMelhor(AMelhorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AMelhorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
